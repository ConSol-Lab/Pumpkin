# This workflow is used to create and publish releases for the pumpkin-solver crate.
#
# The way this works is the following:
#
# The create-release job runs purely to initialize the GitHub release itself
# and to output upload_url for the following job.
#
# The attach-artifacts job runs only once create-release is finished. It gets the
# release upload URL from create-release job outputs, then builds the release
# executables for each supported platform and attaches them as release assets
# to the previously created release.
#
# The key here is that we create the release only once.
#
# Reference:
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/

name: Release Packages
on:
  push:
    tags:
      - "pumpkin-solver-v*"

jobs:
  # Create a GitHub release based on the tag. Extract the appropriate changes from 
  # the CHANGELOG.md to serve as the release body.
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      release_name: ${{ env.RELEASE_NAME }}
      package: ${{ env.PACKAGE }}
      release_version: ${{ env.VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.RELEASE_NAME == ''
        run: |
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027

          echo "RELEASE_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "PACKAGE=${RELEASE_NAME%-*}" >> $GITHUB_ENV
          echo "VERSION=${RELEASE_NAME##*-}" >> $GITHUB_ENV

          echo "release_name: ${GITHUB_REF#refs/tags/}"
          echo "package: ${RELEASE_NAME%-*}"
          echo "version: ${RELEASE_NAME##*-}"
            
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate Release Notes
        shell: bash
        run: |
          set -x
          ./.github/workflows/release-notes.py \
              --tag ${{ env.RELEASE_NAME }}    \
              --output notes-${{ env.RELEASE_NAME }}.md
          cat notes-${{ env.RELEASE_NAME }}.md

      - name: Create GitHub release
        id: release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ env.RELEASE_NAME }}
          bodyFile: notes-${{ env.RELEASE_NAME }}.md

  publish-package:
    name: Publish to Registry
    needs: create-release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Publish to crates.io
      if: ${{ contains(needs.create-release.outputs.package, 'pumpkin-solver') || contains(needs.create-release.outputs.package, 'drcp-format') }}
      run: cargo publish --package ${{ needs.create-release.outputs.package }} --token ${CRATES_TOKEN}
      env:
        CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}

  attach-artifacts:
    name: Build Pumpkin Artifacts and Upload
    if: ${{ contains(needs.create-release.outputs.package, 'pumpkin-solver') }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        build: [linux, macos, win-msvc]
        include:
          - build: linux
            os: ubuntu-20.04
            rust: stable
            target: x86_64-unknown-linux-gnu
          - build: macos
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
          - build: win-msvc
            os: windows-2019
            rust: stable
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}

    - name: Build release binary
      run: cargo build --package pumpkin-solver --target ${{ matrix.target }} --verbose --release

    - name: Build archive
      shell: bash
      run: |
        out_bin_name="${{ needs.create-release.outputs.release_name }}-${{ matrix.target }}"
        if [ "${{ matrix.os }}" = "windows-2019" ]; then
          cp "target/${{ matrix.target }}/release/pumpkin-solver.exe" "$out_bin_name.exe"
          echo "ASSET=$out_bin_name.exe" >> $GITHUB_ENV
        else
          cp "target/${{ matrix.target }}/release/pumpkin-solver" "$out_bin_name"
          echo "ASSET=$out_bin_name" >> $GITHUB_ENV
        fi
      
    - name: Upload release archive
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: ${{ needs.create-release.outputs.release_name }}
        files: ${{ env.ASSET }}
