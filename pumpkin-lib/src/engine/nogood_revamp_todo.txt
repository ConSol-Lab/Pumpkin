* Learned nogood management.
* Restart policy before took into account number of assigned literals, now it might not?
* Implementation of the nogood propagator is basic.
* Implement LBD and activity for nogoods.
* proof logging is done by the nogood propagator?
* Nogood propagator could implement the Propagator trait -> could simplify the main propagation loop!
* Remove allow dead code directives
* Later on remove all SAT code / references / deadcode -> e.g., 'Predicate' does not need a sat literal anymore
* Rename the nogood analysers / new structs.
* Add comments? E.g., the ResolutionNogoodConflictAnalyser uses // but should use ///
* Improve implementation across the board (propagation of nogood? the way they are passed/stored? conflict analysis algorithm?)
* Readd clause minimisation?
* Do proper lazy?
* Replace Boolean variables with 0-1 integers
* Consider special data structures for 0-1 integers (assignments, predicate, compressed predicates)

* get_decision_level for predicate can be done better -> todo!()

* semantic minimisation? Not necessary?

* get_trail_position

* later on: lazy explanation for current decision level predicates, could try it out!