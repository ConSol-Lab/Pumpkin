[with time we would slowly phase out this document in favour of JIRA. The points below are some minor points that I did not yet process into JIRA but will eventually hopefully.]

consider replacing custom error structs like "EncodingStatus" and "ClauseAdditionOutcome" with standard rust error handling.
  this was we can make use of the ? operator
  and we can have pumpkin error types in one place?

have a way to track number of clauses added at any point, useful when dealing with encoders
  should unit clauses be considered as "added clauses"?

add a method to create n literals, should be easier to use than the current new_literals() iterator 

only allow the assignments to create predicates

lifting can be problematic given the updates of literals wrt to the domains

clean up copying in the code, and replace with references where appropriate (not sure it would make a difference in the cases that are left)
  e.g., when passing a predicate or when returning predicates or trail entries

could investigate adding explanation clauses permanently, as learned clauses, or not all. For now we do not add them to the problem, but this is something we would need to investigate what is the best approach here.

implement .iter() for propositional conjunction, currently it has an into_iter but it is not working as intended

currently if you create integer variables, do some solving, and then add a propagator over those variables, the bounds of the variables will not be correctly stored
  this is an exotic use case but could fix this later